(self.webpackChunkquickswap=self.webpackChunkquickswap||[]).push([[8948],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return l},kt:function(){return f}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),c=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=c(r),f=o,m=d["".concat(u,".").concat(f)]||d[f]||s[f]||i;return r?n.createElement(m,a(a({ref:t},l),{},{components:r})):n.createElement(m,a({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var p={};for(var u in t)hasOwnProperty.call(t,u)&&(p[u]=t[u]);p.originalType=e,p.mdxType="string"==typeof e?e:o,a[1]=p;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7386:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return a},metadata:function(){return p},toc:function(){return u},default:function(){return l}});var n=r(2122),o=r(9756),i=(r(7294),r(3905)),a={id:"04-route",title:"Route",tags:"sdk, documentation"},p={unversionedId:"reference/SDK/04-route",id:"version-V2/reference/SDK/04-route",isDocsHomePage:!1,title:"Route",description:"`typescript",source:"@site/versioned_docs/version-V2/reference/SDK/04-route.md",sourceDirName:"reference/SDK",slug:"/reference/SDK/04-route",permalink:"/quickswap-docs/reference/SDK/04-route",editUrl:"https://github.com/QuickSwap/quickswap-docs/tree/main/versioned_docs/version-V2/reference/SDK/04-route.md",version:"V2",sidebarPosition:4,frontMatter:{id:"04-route",title:"Route",tags:"sdk, documentation"},sidebar:"defaultSidebar",previous:{title:"Pair",permalink:"/quickswap-docs/reference/SDK/03-pair"},next:{title:"Trade",permalink:"/quickswap-docs/reference/SDK/05-trade"}},u=[{value:"pairs",id:"pairs",children:[]},{value:"path",id:"path",children:[]},{value:"input",id:"input",children:[]},{value:"output",id:"output",children:[]},{value:"midPrice",id:"midprice",children:[]}],c={toc:u};function l(e){var t=e.components,r=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"constructor(pairs: Pair[], input: Token)\n")),(0,i.kt)("p",null,"The Route entity represents one or more ordered Uniswap pairs with a fully specified path from input token to output token."),(0,i.kt)("h1",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ChainId, Token, TokenAmount, Pair, Route } from '@uniswap/sdk'\n\nconst HOT = new Token(ChainId.MAINNET, '0xc0FFee0000000000000000000000000000000000', 18, 'HOT', 'Caffeine')\nconst NOT = new Token(ChainId.MAINNET, '0xDeCAf00000000000000000000000000000000000', 18, 'NOT', 'Caffeine')\nconst HOT_NOT = new Pair(new TokenAmount(HOT, '2000000000000000000'), new TokenAmount(NOT, '1000000000000000000'))\n\nconst route = new Route([HOT_NOT], NOT)\n")),(0,i.kt)("h1",{id:"properties"},"Properties"),(0,i.kt)("h2",{id:"pairs"},"pairs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"pairs: Pair[]\n")),(0,i.kt)("p",null,"The ordered pairs that the route is comprised of."),(0,i.kt)("h2",{id:"path"},"path"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"path: Token[]\n")),(0,i.kt)("p",null,"The full path from input token to output token."),(0,i.kt)("h2",{id:"input"},"input"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"input: string\n")),(0,i.kt)("p",null,"The input token."),(0,i.kt)("h2",{id:"output"},"output"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"output: string\n")),(0,i.kt)("p",null,"The output token."),(0,i.kt)("h2",{id:"midprice"},"midPrice"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"midPrice: Price\n")),(0,i.kt)("p",null,"Returns the current mid price along the route."))}l.isMDXComponent=!0}}]);