(self.webpackChunkuniswap=self.webpackChunkuniswap||[]).push([[6943],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,f=m["".concat(i,".").concat(d)]||m[d]||p[d]||s;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=e,u.mdxType="string"==typeof e?e:a,o[1]=u;for(var l=2;l<s;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7531:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return u},toc:function(){return i},default:function(){return c}});var r=n(2122),a=n(9756),s=(n(7294),n(3905)),o={title:"Library",tags:"smart-contracts, documentation"},u={unversionedId:"reference/smart-contracts/library",id:"version-V2/reference/smart-contracts/library",isDocsHomePage:!1,title:"Library",description:"Code",source:"@site/versioned_docs/version-V2/reference/smart-contracts/04-library.md",sourceDirName:"reference/smart-contracts",slug:"/reference/smart-contracts/library",permalink:"/quickswap-docs/reference/smart-contracts/library",editUrl:"https://github.com/QuickSwap/quickswap-docs/tree/main/versioned_docs/version-V2/reference/smart-contracts/04-library.md",version:"V2",sidebarPosition:4,frontMatter:{title:"Library",tags:"smart-contracts, documentation"},sidebar:"defaultSidebar",previous:{title:"Pair (ERC-20)",permalink:"/quickswap-docs/reference/smart-contracts/pair-erc-20"},next:{title:"Router01",permalink:"/quickswap-docs/reference/smart-contracts/router01"}},i=[{value:"Code",id:"code",children:[]},{value:"sortTokens",id:"sorttokens",children:[]},{value:"pairFor",id:"pairfor",children:[]},{value:"getReserves",id:"getreserves",children:[]},{value:"quote",id:"quote",children:[]},{value:"getAmountOut",id:"getamountout",children:[]},{value:"getAmountIn",id:"getamountin",children:[]},{value:"getAmountsOut",id:"getamountsout",children:[]},{value:"getAmountsIn",id:"getamountsin",children:[]}],l={toc:i};function c(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"code"},"Code"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/libraries/UniswapV2Library.sol"},(0,s.kt)("inlineCode",{parentName:"a"},"UniswapV2Library.sol"))),(0,s.kt)("h1",{id:"internal-functions"},"Internal Functions"),(0,s.kt)("h2",{id:"sorttokens"},"sortTokens"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1);\n")),(0,s.kt)("p",null,"Sorts token addresses."),(0,s.kt)("h2",{id:"pairfor"},"pairFor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair);\n")),(0,s.kt)("p",null,"Calculates the address for a pair without making any external calls (see ",(0,s.kt)("a",{parentName:"p",href:"/quickswap-docs/guides/javascript-sdk/05-getting-pair-addresses"},"Pair Addresses"),"."),(0,s.kt)("h2",{id:"getreserves"},"getReserves"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB);\n")),(0,s.kt)("p",null,"Calls ",(0,s.kt)("a",{parentName:"p",href:"/quickswap-docs/reference/smart-contracts/pair#getreserves"},"getReserves")," on the pair for the passed tokens, and returns the results sorted in the order that the parameters were passed in."),(0,s.kt)("h2",{id:"quote"},"quote"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB);\n")),(0,s.kt)("p",null,"Given some asset amount and reserves, returns an amount of the other asset representing equivalent value."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Useful for calculating optimal token amounts before calling ",(0,s.kt)("a",{parentName:"li",href:"/quickswap-docs/reference/smart-contracts/pair#mint-1"},"mint"),".")),(0,s.kt)("h2",{id:"getamountout"},"getAmountOut"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut);\n")),(0,s.kt)("p",null,"Given an ",(0,s.kt)("em",{parentName:"p"},"input")," asset amount, returns the maximum ",(0,s.kt)("em",{parentName:"p"},"output")," amount of the other asset (accounting for fees) given reserves."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Used in ",(0,s.kt)("a",{parentName:"li",href:"#getamountsout"},"getAmountsOut"),".")),(0,s.kt)("h2",{id:"getamountin"},"getAmountIn"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn);\n")),(0,s.kt)("p",null,"Returns the minimum ",(0,s.kt)("em",{parentName:"p"},"input")," asset amount required to buy the given ",(0,s.kt)("em",{parentName:"p"},"output")," asset amount (accounting for fees) given reserves."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Used in ",(0,s.kt)("a",{parentName:"li",href:"#getamountsin"},"getAmountsIn"),".")),(0,s.kt)("h2",{id:"getamountsout"},"getAmountsOut"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"function getAmountsOut(uint amountIn, address[] memory path) internal view returns (uint[] memory amounts);\n")),(0,s.kt)("p",null,"Given an ",(0,s.kt)("em",{parentName:"p"},"input")," asset amount and an array of token addresses, calculates all subsequent maximum ",(0,s.kt)("em",{parentName:"p"},"output")," token amounts by calling ",(0,s.kt)("a",{parentName:"p",href:"#getreserves"},"getReserves")," for each pair of token addresses in the path in turn, and using these to call ",(0,s.kt)("a",{parentName:"p",href:"#getamountout"},"getAmountOut"),"."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Useful for calculating optimal token amounts before calling ",(0,s.kt)("a",{parentName:"li",href:"/quickswap-docs/reference/smart-contracts/pair#swap-1"},"swap"),".")),(0,s.kt)("h2",{id:"getamountsin"},"getAmountsIn"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity"},"function getAmountsIn(uint amountOut, address[] memory path) internal view returns (uint[] memory amounts);\n")),(0,s.kt)("p",null,"Given an ",(0,s.kt)("em",{parentName:"p"},"output")," asset amount and an array of token addresses, calculates all preceding minimum ",(0,s.kt)("em",{parentName:"p"},"input")," token amounts by calling ",(0,s.kt)("a",{parentName:"p",href:"#getreserves"},"getReserves")," for each pair of token addresses in the path in turn, and using these to call ",(0,s.kt)("a",{parentName:"p",href:"#getamountin"},"getAmountIn"),"."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Useful for calculating optimal token amounts before calling ",(0,s.kt)("a",{parentName:"li",href:"/quickswap-docs/reference/smart-contracts/pair#swap-1"},"swap"),".")))}c.isMDXComponent=!0}}]);